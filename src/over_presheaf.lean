import category_theory.functor_category
import category_theory.types
import category_theory.over
import category_theory.elements
import category_theory.limits.shapes.products

universes v‚ÇÄ u‚ÇÄ v‚ÇÅ u‚ÇÅ

namespace heq

lemma congr_fun {Œ± Œ≤‚ÇÄ Œ≤‚ÇÅ : Type*} {f‚ÇÄ : Œ± ‚Üí Œ≤‚ÇÄ} {f‚ÇÅ : Œ± ‚Üí Œ≤‚ÇÅ} (hŒ≤ : Œ≤‚ÇÄ = Œ≤‚ÇÅ) (hf : f‚ÇÄ == f‚ÇÅ)
  (a : Œ±) : f‚ÇÄ a == f‚ÇÅ a := by { subst hŒ≤, subst hf }

protected lemma funext {Œ± Œ≤‚ÇÄ Œ≤‚ÇÅ : Type*} {f‚ÇÄ : Œ± ‚Üí Œ≤‚ÇÄ} {f‚ÇÅ : Œ± ‚Üí Œ≤‚ÇÅ} (hŒ≤ : Œ≤‚ÇÄ = Œ≤‚ÇÅ)
  (hf : Œ† a, f‚ÇÄ a == f‚ÇÅ a) : f‚ÇÄ == f‚ÇÅ :=
by { subst hŒ≤, apply heq_of_eq, funext, exact eq_of_heq (hf _), }

end heq

namespace category_theory

variables {C : Type u‚ÇÄ} [category.{v‚ÇÄ} C] {P : C ‚•§ Type u‚ÇÄ}

namespace category_of_elements

@[simps] def obj_mk (X : C) (p : P.obj X) : P.elements := ‚ü® X , p ‚ü©

@[reducible] def hom_mk {X Y : C} {pX : P.obj X} {pY : P.obj Y} (h : X ‚ü∂ Y) (hcomm : P.map h pX = pY) :
  obj_mk X pX ‚ü∂ obj_mk Y pY := ‚ü® h , hcomm ‚ü©




end category_of_elements

namespace presheaves_elements

namespace equivalence_over

open category_of_elements

variables {F : P.elements ‚•§ Type u‚ÇÄ} {X Y Z : C} {p : P.obj X}

lemma map_hom_mk_id_heq_map_id
  {X : C} {p : P.obj X} {F : P.elements ‚•§ Type u‚ÇÄ} :
  (F.map (hom_mk (ùüô X) rfl) : F.obj ‚ü® X , p ‚ü© ‚ü∂ F.obj ‚ü® X , P.map (ùüô X) p‚ü©)
    == F.map (ùüô ‚ü® X , p ‚ü©) :=
by { dsimp only [hom_mk, obj_mk, category_theory.category_of_elements], congr', {simp}, {simp} }

lemma map_hom_mk_id_heq_map_id_apply
  {X : C} {p : P.obj X} {F : P.elements ‚•§ Type u‚ÇÄ} (f : F.obj ‚ü® X , p ‚ü©) :
  F.map (hom_mk (ùüô X) rfl) f == F.map (ùüô _) f :=
heq.congr_fun (by simpa) map_hom_mk_id_heq_map_id f

lemma map_hom_mk_comp_heq_map_comp {X Y Z : C} {p : P.obj X} {F : P.elements ‚•§ Type u‚ÇÄ}
  {h‚ÇÄ : X ‚ü∂ Y} {h‚ÇÅ : Y ‚ü∂ Z} :
  (F.map (hom_mk (h‚ÇÄ ‚â´ h‚ÇÅ) rfl) : F.obj ‚ü® X , p ‚ü© ‚ü∂ F.obj ‚ü® Z , P.map (h‚ÇÄ ‚â´ h‚ÇÅ) p ‚ü©)
    == F.map ((hom_mk h‚ÇÄ rfl : obj_mk X p ‚ü∂ obj_mk Y (P.map h‚ÇÄ p)) ‚â´ hom_mk h‚ÇÅ rfl) :=
begin
  dsimp only [hom_mk, category_theory.category_of_elements],
  congr',
  { simp },
  { simp },
  { simpa },
end

lemma map_hom_mk_comp_heq_map_comp_apply {X Y Z : C} {p : P.obj X} {F : P.elements ‚•§ Type u‚ÇÄ}
  {h‚ÇÄ : X ‚ü∂ Y} {h‚ÇÅ : Y ‚ü∂ Z} (f : F.obj ‚ü® X , p ‚ü©) :
  F.map (hom_mk (h‚ÇÄ ‚â´ h‚ÇÅ) rfl) f == F.map (hom_mk h‚ÇÄ rfl ‚â´ hom_mk h‚ÇÅ rfl) f :=
heq.congr_fun (by simp) map_hom_mk_comp_heq_map_comp f

variable (F)

@[simps] def functor_map_obj (F : P.elements ‚•§ Type u‚ÇÄ) : C ‚•§ Type u‚ÇÄ :=
{ obj := Œª X, Œ£ p : P.obj X, F.obj ‚ü® X , p ‚ü©,
  map := Œª X Y h, Œª ‚ü® p , f ‚ü©, ‚ü® P.map h p , F.map (hom_mk h rfl) f ‚ü©,
  map_id' := Œª X, funext $ Œª ‚ü® p , f ‚ü©,
  by { ext, { simp [functor_map_obj._match_1] },
    { apply heq.trans (map_hom_mk_id_heq_map_id_apply f), simpa }},
  map_comp' := Œª X Y Z h‚ÇÄ h‚ÇÅ, funext $ Œª ‚ü® p , f ‚ü©,
  by { ext , { simp [functor_map_obj._match_1] },
    { apply heq.trans (map_hom_mk_comp_heq_map_comp_apply f), simpa }}}

def functor_map : P.elements ‚•§ Type u‚ÇÄ ‚Üí over P :=
Œª F, over.mk (
{ app := sorry,
  naturality' := sorry } : functor_map_obj F ‚ü∂ P)

protected def functor : P.elements ‚•§ Type u‚ÇÄ ‚•§ over P :=
{ obj := sorry,
  map := sorry,
  map_id' := sorry,
  map_comp' := sorry }

end equivalence_over

def equivalence_over : (P.elements ‚•§ Type u‚ÇÄ) ‚âå over P :=
{ functor := sorry,
  inverse := sorry,
  unit_iso := sorry,
  counit_iso := sorry,
  functor_unit_iso_comp' := sorry }

end presheaves_elements
end category_theory
