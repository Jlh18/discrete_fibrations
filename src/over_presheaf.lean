import category_theory.functor_category
import category_theory.types
import category_theory.over
import category_theory.elements
import category_theory.limits.shapes.products

universes v‚ÇÄ u‚ÇÄ v‚ÇÅ u‚ÇÅ

lemma hcongr_fun {Œ± Œ≤‚ÇÄ Œ≤‚ÇÅ : Type*} {f‚ÇÄ : Œ± ‚Üí Œ≤‚ÇÄ} {f‚ÇÅ : Œ± ‚Üí Œ≤‚ÇÅ} (hŒ≤ : Œ≤‚ÇÄ = Œ≤‚ÇÅ) (hf : f‚ÇÄ == f‚ÇÅ)
  (a : Œ±) : f‚ÇÄ a == f‚ÇÅ a := by { subst hŒ≤, subst hf }

namespace category_theory

variables {C : Type u‚ÇÄ} [category.{v‚ÇÄ} C] {P : C ‚•§ Type u‚ÇÄ}

namespace category_of_elements

/-- Explicit, typed construction of an object in category of elements -/
@[simps] def obj_mk (X : C) (p : P.obj X) : P.elements := ‚ü® X , p ‚ü©

/-- Explicit, typed construction of a hom in category of elements -/
@[reducible] def hom_mk {X Y : C} {pX : P.obj X} {pY : P.obj Y} (h : X ‚ü∂ Y) (hcomm : P.map h pX = pY) :
  obj_mk X pX ‚ü∂ obj_mk Y pY := ‚ü® h , hcomm ‚ü©

end category_of_elements

namespace presheaf_elements

open category_of_elements

variables {F : P.elements ‚•§ Type u‚ÇÄ} {X Y Z : C} {p : P.obj X}

lemma map_hom_mk_id_heq_map_id
  {X : C} {p : P.obj X} {F : P.elements ‚•§ Type u‚ÇÄ} :
  (F.map (hom_mk (ùüô X) rfl) : F.obj ‚ü® X , p ‚ü© ‚ü∂ F.obj ‚ü® X , P.map (ùüô X) p‚ü©)
    == F.map (ùüô ‚ü® X , p ‚ü©) :=
by { congr', {simp}, {simp} }

lemma map_hom_mk_id_heq_map_id_apply
  {X : C} {p : P.obj X} {F : P.elements ‚•§ Type u‚ÇÄ} (f : F.obj ‚ü® X , p ‚ü©) :
  F.map (hom_mk (ùüô X) rfl) f == F.map (ùüô _) f :=
hcongr_fun (by simpa) map_hom_mk_id_heq_map_id f

lemma map_hom_mk_comp_heq_map_comp {X Y Z : C} {p : P.obj X} {F : P.elements ‚•§ Type u‚ÇÄ}
  {h‚ÇÄ : X ‚ü∂ Y} {h‚ÇÅ : Y ‚ü∂ Z} :
  (F.map (hom_mk (h‚ÇÄ ‚â´ h‚ÇÅ) rfl) : F.obj ‚ü® X , p ‚ü© ‚ü∂ F.obj ‚ü® Z , P.map (h‚ÇÄ ‚â´ h‚ÇÅ) p ‚ü©)
    == F.map ((hom_mk h‚ÇÄ rfl : obj_mk X p ‚ü∂ obj_mk Y (P.map h‚ÇÄ p)) ‚â´ hom_mk h‚ÇÅ rfl) :=
by { congr'; simp }

lemma map_hom_mk_comp_heq_map_comp_apply {X Y Z : C} {p : P.obj X} {F : P.elements ‚•§ Type u‚ÇÄ}
  {h‚ÇÄ : X ‚ü∂ Y} {h‚ÇÅ : Y ‚ü∂ Z} (f : F.obj ‚ü® X , p ‚ü©) :
  F.map (hom_mk (h‚ÇÄ ‚â´ h‚ÇÅ) rfl) f == F.map (hom_mk h‚ÇÄ rfl ‚â´ hom_mk h‚ÇÅ rfl) f :=
hcongr_fun (by simp) map_hom_mk_comp_heq_map_comp f

namespace equivalence

variable (F)

/--
  Given a presheaf on the category of elements `F : P.elements ‚•§ Type`
  construct a presheaf `category_theory.presheaf_elements.functor_obj_left F : C ‚•§ Type`
  by taking sums on objects.
  This process is functorial by `category_theory.presheaf_elements.to_presheaf`
-/
@[simps] def to_presheaf_obj : C ‚•§ Type u‚ÇÄ :=
{ obj := Œª X, Œ£ p : P.obj X, F.obj ‚ü® X , p ‚ü©,
  map := Œª X Y h, Œª ‚ü® p , f ‚ü©, ‚ü® P.map h p , F.map (hom_mk h rfl) f ‚ü©,
  map_id' := Œª X, funext $ Œª ‚ü® p , f ‚ü©,
    by { ext, { simp [to_presheaf_obj._match_1] },
      { apply heq.trans (map_hom_mk_id_heq_map_id_apply f), simpa }},
  map_comp' := Œª X Y Z h‚ÇÄ h‚ÇÅ, funext $ Œª ‚ü® p , f ‚ü©,
    by { ext , { simp [to_presheaf_obj._match_1] },
      { apply heq.trans (map_hom_mk_comp_heq_map_comp_apply f), simpa }}}

variables {F} {G : P.elements ‚•§ Type u‚ÇÄ}

/--
  Given a natural transformation of presheaves on the category of elements
  construct a natural transformation between the induced presheaves.
  Part of the definition `category_theory.presheaf_elements.to_presheaf`
-/
@[simps] def to_presheaf_map (Œ± : F ‚ü∂ G) : to_presheaf_obj F ‚ü∂ to_presheaf_obj G :=
{ app := Œª X ‚ü® p , f ‚ü©, ‚ü® p , Œ±.app _ f ‚ü©,
  naturality' := Œª X Y h, funext $ Œª ‚ü® p , f ‚ü©, by { ext,
    { simp [to_presheaf_map._match_1, to_presheaf_obj] },
    { apply heq_of_eq, exact congr_fun
      (@nat_trans.naturality _ _ _ _ _ _ Œ± ‚ü® X , p ‚ü© ‚ü® Y , P.map h p ‚ü© ‚ü® h , rfl ‚ü©) f }}}

/--
  A functor that takes presheaves on the category of elements `P.elements ‚•§ Type`
  and constructs presheaves `C ‚•§ Type` by taking sums on objects.
  This forms an equivalence of categories between presheaves on the category of elements.
  See `category_theory.presheaf_elements.equivalence`
-/
@[simps] def to_presheaf : (P.elements ‚•§ Type u‚ÇÄ) ‚•§ C ‚•§ Type u‚ÇÄ :=
{ obj := to_presheaf_obj,
  map := Œª _ _, to_presheaf_map }

/--
  The functor `category_theory.presheaf_elements.to_presheaf` but as a functor to the
  over category `over P`.
  See `category_theory.presheaf_elements.equivalence`
-/
@[simps] def to_presheaf_over : (P.elements ‚•§ Type u‚ÇÄ) ‚•§ over P :=
{ obj := Œª F, over.mk ({ app := Œª X, sigma.fst } : to_presheaf_obj F ‚ü∂ P),
  map := Œª F G Œ±, over.hom_mk (to_presheaf_map Œ±) }

variables (Q : over P)

/--
  Given a presheaf `Œ± : Q ‚Üí P` in the overcategory of presheaf `P` and an object `‚ü® X , p ‚ü©`
  in the category of elements of `P`,
  construct the pullback of the object `p` along the natural transformation at `X`
  ```
    inverse_obj_obj ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚Üí *
         |                   |
         |                   | p
         V                   V
        Q X ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚Üí P X
                  Œ± X
  ```
  This process is functorial by `category_theory.presheaf_elements.inverse`
-/
@[simp, nolint has_inhabited_instance]
def inverse_obj_obj : P.elements ‚Üí Type u‚ÇÄ :=
Œª ‚ü® X , p ‚ü©, { q : Q.left.obj X // Q.hom.app X q = p }

/-- The process `category_theory.presheaf_elements.inverse_obj_obj` is functorial -/
@[simp] def inverse_obj_map : Œ† (X Y : P.elements) (h : X ‚ü∂ Y),
  inverse_obj_obj Q X ‚ü∂ inverse_obj_obj Q Y :=
Œª ‚ü® X , pX ‚ü© ‚ü® Y , pY ‚ü© ‚ü® h , hcomm ‚ü© ‚ü® qX , hqX ‚ü©,
  ‚ü® Q.left.map h qX , by { convert hcomm, rw ‚Üê hqX, exact congr_fun (Q.hom.naturality h) qX } ‚ü©

lemma inverse_obj_map_comp : Œ† (X Y Z : P.elements) (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z),
  inverse_obj_map Q X Z (f ‚â´ g) = inverse_obj_map Q X Y f ‚â´ (inverse_obj_map Q Y Z g) :=
Œª ‚ü® X , pX ‚ü© ‚ü® Y , pY ‚ü© ‚ü® Z , pZ ‚ü© ‚ü® f , fcomm ‚ü© ‚ü® g , gcomm ‚ü©, funext $ Œª ‚ü® qX , hqX ‚ü©,
by { dsimp only [category_theory.category_of_elements], simp }

/--
  Given a presheaf `Q : over P` in the overcategory of presheaf `P`,
  construct a presheaf on the category of elements of `P` by taking pullbacks
  (see `category_theory.presheaf_elements.inverse_obj_obj`).
  This process is also `over P ‚•§ P.elements ‚•§ Type` is functorial by
  `category_theory.presheaf_elements.inverse`
-/
@[simps] def inverse_obj : P.elements ‚•§ Type u‚ÇÄ :=
{ obj := inverse_obj_obj Q,
  map := Œª _ _, inverse_obj_map Q _ _,
  map_id' := Œª ‚ü® X , p ‚ü©, funext $ Œª ‚ü® q , hq ‚ü©,
    by { dsimp only [category_theory.category_of_elements], simp },
  map_comp' := Œª _ _ _, inverse_obj_map_comp _ _ _ _ }

/--
  For presheaves `Q : over P` in the overcategory of presheaf `P`,
  functorially construct presheaves on the category of elements of `P` by taking pullbacks
  (see `category_theory.presheaf_elements.inverse_obj_obj`).
  This is the inverse of an equivalence `category_theory.presheaf_elements.equivalence`.
-/
@[simps] def inverse : over P ‚•§ P.elements ‚•§ Type u‚ÇÄ :=
{ obj := inverse_obj,
  map := Œª Q‚ÇÄ Q‚ÇÅ ŒΩ,
    { app := Œª ‚ü® X , p ‚ü© ‚ü® q , qX ‚ü©, ‚ü® ŒΩ.left.app X q ,
        by {convert qX, exact congr_fun (congr_fun (congr_arg nat_trans.app ŒΩ.w) X) q } ‚ü©,
      naturality' := Œª ‚ü® X , pY ‚ü© ‚ü® Y , pY ‚ü© ‚ü® h , hcomm ‚ü©, funext $ Œª ‚ü® q , hq ‚ü©,
        subtype.ext (congr_fun (ŒΩ.left.naturality h) q) } }.

/-- Part of `category_theory.presheaf_elements.unit_iso`-/
def unit_iso_hom : ùü≠ (P.elements ‚•§ Type u‚ÇÄ) ‚ü∂ to_presheaf_over ‚ãô inverse :=
{ app := Œª _, { app := Œª ‚ü® X , p ‚ü© f, ‚ü® ‚ü® p , f ‚ü© , rfl ‚ü© } }

/-- Part of `category_theory.presheaf_elements.unit_iso`-/
def unit_iso_inv : to_presheaf_over ‚ãô inverse ‚ü∂ ùü≠ (P.elements ‚•§ Type u‚ÇÄ) :=
{ app := Œª F, { app := Œª ‚ü® X , p ‚ü© ‚ü® ‚ü® p' , f ‚ü© , hq ‚ü©, eq.mp (by {congr, exact hq}) f }}

/-- Part of `category_theory.presheaf_elements.equivalence`-/
def unit_iso : ùü≠ (P.elements ‚•§ Type u‚ÇÄ) ‚âÖ to_presheaf_over ‚ãô inverse :=
{ hom := unit_iso_hom,
  inv := unit_iso_inv }

/-- Part of `category_theory.presheaf_elements.counit_iso`-/
def counit_iso_hom : inverse ‚ãô to_presheaf_over ‚ü∂ ùü≠ (over P) :=
{ app := Œª Q, over.hom_mk { app := Œª X ‚ü® p , ‚ü® q , hq ‚ü©‚ü©, q }
 (by { ext X q, obtain ‚ü® p , ‚ü® q , hq ‚ü©‚ü© := q, exact hq }) }

/-- Part of `category_theory.presheaf_elements.counit_iso`-/
def counit_iso_inv : ùü≠ (over P) ‚ü∂ inverse ‚ãô to_presheaf_over :=
{ app := Œª Q, over.hom_mk
  { app := Œª X q, ‚ü® Q.hom.app X q , ‚ü® q , rfl ‚ü© ‚ü©,
    naturality' := Œª X Y h, funext $ Œª q,
      by {ext, {exact congr_fun (Q.hom.naturality h) q}, {refl}}}
  (by {ext X q, refl}),
  naturality' := Œª Q‚ÇÄ Q‚ÇÅ ŒΩ, by { ext X q,
    { exact congr_fun (congr_fun (congr_arg nat_trans.app ŒΩ.w) X) q }, { refl }}}

/-- Part of `category_theory.presheaf_elements.equivalence`-/
def counit_iso : inverse ‚ãô to_presheaf_over ‚âÖ ùü≠ (over P) :=
{ hom := counit_iso_hom,
  inv := counit_iso_inv }.

end equivalence

/--
  The category of presheaves on the category of elements of a presheaf `P`
  is equivalent to the overcategory of `P`.
-/
def equivalence : (P.elements ‚•§ Type u‚ÇÄ) ‚âå over P :=
{ functor := equivalence.to_presheaf_over,
  inverse := equivalence.inverse,
  unit_iso := equivalence.unit_iso,
  counit_iso := equivalence.counit_iso }

end presheaf_elements

end category_theory
