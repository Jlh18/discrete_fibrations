import category_theory.category.Cat
import category_theory.limits.constructions.pullbacks
import category_theory.limits.constructions.limits_of_products_and_equalizers
import category_theory.pi.basic

-- TODO Show that category of elements of a functor into Set is pullback
--      in the category of categories

/-!
# The category of (small) categories is complete

This file contains constructions of all (small) 1-limits
in the category `Cat` of all categories, treated as a 1-category.
We use the result `limits_from_equalizers_and_products`.
We construct dependent products, fiber products/pullbacks,
and equalizers in the category of Categories.

## Implementation notes

`Cat.{v u}` in general (i.e. not small) does not have all small limits.
If it were then it would be closed under products,
which could have index `I : max v u` as big as the morphisms (functors).
However the product category `Œ† i : I, C i : Type (max v u)`
is too large to be an object in `Cat.{v u}`.

It is better to refer to morphisms in `Cat` using `‚ü∂ (\hom)`
rather than `‚•§ (\functor)` for lean to infer instances.
-/

/-
## Declaration

Some of the work in this file is thanks to others.
Where it is *not* stated, it is my own work.
-/

universes u v w

open category_theory
open category_theory.limits
open category_theory.prod

namespace category_theory

section heq

variables
  {C D E : Type u} [category.{v} C] [category.{v} D] [category.{v} E]
  {F G : C ‚•§ D} {x y z : C} (f : x ‚ü∂ y) {g : y ‚ü∂ z}

lemma heq_iff_eq_conj_eq_to_hom
  (h‚ÇÅ : F.obj x = G.obj x) (h‚ÇÇ : F.obj y = G.obj y) :
  F.map f = eq_to_hom h‚ÇÅ ‚â´ G.map f ‚â´ eq_to_hom h‚ÇÇ.symm ‚Üî F.map f == G.map f :=
by { generalize : F.map f = Ff, generalize : G.map f = Gf, clear f,
  generalize_hyp : F.obj x = F‚ÇÅ at h‚ÇÅ Ff ‚ä¢, generalize_hyp : F.obj y = F‚ÇÇ at h‚ÇÇ Ff ‚ä¢,
  cases h‚ÇÅ, cases h‚ÇÇ, simp }
-- entirely not my work, due to Xu Junyan

namespace functor

variable {f}

lemma map_comp_heq (hx : F.obj x = G.obj x) (hy : F.obj y = G.obj y) (hz : F.obj z = G.obj z)
  (hf : F.map f == G.map f) (hg : F.map g == G.map g) :
  F.map (f ‚â´ g) == G.map (f ‚â´ g) :=
begin
  rw [F.map_comp, G.map_comp],
  -- cannot case directly on hf, since types of its source/target are not
  -- definitionally equal.
  -- To make them definitionally equal, must case on x.2 y.2 z.2
  -- In order to case on x.2 and z.2 must generalize these
  -- But f depends on x, and hf depends on f, so must generalize these variables
  -- in reverse order.
  generalize_hyp : F.map f = Ff at ‚ä¢ hf, generalize_hyp : G.map f = Gf at ‚ä¢ hf,
  generalize_hyp : F.map g = Fg at ‚ä¢ hg, generalize_hyp : G.map g = Gg at ‚ä¢ hg,
  generalize_hyp : F.obj x = Fx at ‚ä¢ Ff Gf hx,
  generalize_hyp : F.obj y = Fy at ‚ä¢ Fg Ff hy,
  generalize_hyp : F.obj z = Fz at ‚ä¢ Fg Gg hz,
  -- now able to clear the variables, substitute eqs and heqs
  subst hx, subst hy, subst hz, cases hf, cases hg,
  exact heq_of_eq rfl,
end
-- thanks to Xu Junyan who came up with the proof
-- I extracted this to two lemmas

lemma map_comp_heq' (hobj : ‚àÄ x : C, F.obj x = G.obj x)
  (hmap : ‚àÄ {x y} (f : x ‚ü∂ y), F.map f == G.map f) :
  F.map (f ‚â´ g) == G.map (f ‚â´ g) :=
  map_comp_heq (hobj _) (hobj _) (hobj _) (hmap _) (hmap _)

lemma precomp_map_heq (H : E ‚•§ C) (hobj : ‚àÄ x : C, F.obj x = G.obj x)
  (hmap : ‚àÄ {x y} (f : x ‚ü∂ y), F.map f == G.map f) {x y : E} (f : x ‚ü∂ y) :
  (H ‚ãô F).map f == (H ‚ãô G).map f := hmap _

lemma comp_map_heq (H : D ‚•§ E) (hobj : ‚àÄ x : C, F.obj x = G.obj x)
  (hmap : ‚àÄ {x y} (f : x ‚ü∂ y), F.map f == G.map f) :
  (F ‚ãô H).map f == (G ‚ãô H).map f :=
begin
  dsimp,
  obtain ‚ü® hx, hy, hf ‚ü©  := ‚ü® hobj x, hobj y, hmap f ‚ü©,
  generalize_hyp : F.map f = Ff at ‚ä¢ hf,
  generalize_hyp : G.map f = Gf at ‚ä¢ hf,
  generalize_hyp : F.obj x = Fx at ‚ä¢ Ff hx,
  generalize_hyp : G.obj x = Gx at ‚ä¢ Gf hx,
  generalize_hyp : F.obj y = Fy at ‚ä¢ Ff hy,
  generalize_hyp : G.obj y = Gy at ‚ä¢ Gf hy,
  subst hx, subst hy, cases hf,
  exact heq_of_eq rfl,
end
-- similar idea to map_comp_heq

lemma hcongr_hom {F G : C ‚•§ D} (h : F = G) {X Y} (f : X ‚ü∂ Y) :
  F.map f == G.map f :=
by subst h; simp

end functor

end heq

section product

/-- The natural transformation between two functors out of discrete I,
specified by its components. -/
def map_pi {I : Type w} {C : Type u} [category.{v} C] {F G : discrete I ‚•§ C}
  (on_obj : Œ† i : I, F.obj i ‚ü∂ G.obj i) : F ‚ü∂ G :=
{ app := on_obj }

end product

section equalizer

variables
  {C D E : Type u} [category.{v} C] [category.{v} D] [category.{v} E]
  {F G : C ‚•§ D} {x y z : C} {f : x ‚ü∂ y} {g : y ‚ü∂ z}

/-- The equalizer category of two functors (as a subcategory of the source category C) -/
instance equalizer : category.{v} { c : C // F.obj c = G.obj c } :=
{ hom := Œª x y,
    { f : x.1 ‚ü∂ y.1 // F.map f == G.map f },
  id := Œª x, ‚ü® ùüô x , by { erw [F.map_id _, G.map_id, x.2], } ‚ü©,
  comp := Œª x y z f g, ‚ü® f.1 ‚â´ g.1 , functor.map_comp_heq x.2 y.2 z.2 f.2 g.2 ‚ü© }
-- this proof used to be 14 lines long,
-- extracted map_comp_heq; thanks to Xu Junyan helping to use heq (==) ‚Üê eq (=)

abbreviation EQ (F G : C ‚•§ D) := { c : C // F.obj c = G.obj c }

namespace equalizer

/-- Existence part of the universal property of equalizers -/
def lift (H : E ‚•§ C) (hobj : ‚àÄ e : E, (H ‚ãô F).obj e = (H ‚ãô G).obj e)
  (hmap : ‚àÄ {x y : E} (f : x ‚ü∂ y), F.map (H.map f) == G.map (H.map f)) :
  E ‚•§ { c : C // F.obj c = G.obj c } :=
{ obj := Œª x, ‚ü® H.obj x , hobj x ‚ü©,
  map := Œª _ _ f, ‚ü® H.map f , hmap f ‚ü© }

/-- The map embedding the equalizer of two functors into the source category -/
def Œπ : EQ F G ‚•§ C :=
{ obj := subtype.val,
  map := Œª _ _, subtype.val }

lemma Œπ_obj (x : EQ F G) : (Œπ ‚ãô F).obj x = (Œπ ‚ãô G).obj x := x.2

lemma Œπ_map {x y : EQ F G} (f : x ‚ü∂ y) : (Œπ ‚ãô F).map f == (Œπ ‚ãô G).map f := f.2

lemma self_eq_lift_obj (H : E ‚•§ EQ F G) (x : E) :
  (H ‚ãô Œπ ‚ãô F).obj x = (H ‚ãô Œπ ‚ãô G).obj x := by { erw Œπ_obj, refl }

lemma self_eq_lift_map (H : E ‚•§ EQ F G) {x y : E} (f : x ‚ü∂ y) :
  (H ‚ãô Œπ ‚ãô F).map f == (H ‚ãô Œπ ‚ãô G).map f :=
functor.precomp_map_heq _ Œπ_obj (Œª _ _, Œπ_map) _

/-- Any map into the equalizer is equal to the induced map from the
universal property using the obvious composition-/
lemma self_eq_lift (H : E ‚•§ EQ F G) :
  H = lift (H ‚ãô Œπ) (self_eq_lift_obj H) (Œª _ _, self_eq_lift_map H) :=
functor.hext (Œª x, subtype.ext rfl)
  (Œª x y f, by { dsimp only [lift, Œπ], apply heq_of_eq, apply subtype.ext, refl })

end equalizer
end equalizer

namespace Cat

namespace pi

variables {C : Cat.{u u}} {I : Type u} {F : discrete I ‚•§ Cat.{u u}}

/-- Existence in the universal property of products -/
def lift (legs : Œ† i : I, C ‚ü∂ F.obj i) : C ‚ü∂ pi F :=
{ obj := Œª x i, (legs i).obj x,
  map := Œª _ _ f i, (legs i).map f }

/-- Any map into the product is equal to the induced map from the
universal property applied to the obvious composition -/
lemma self_eq_lift (G : C ‚ü∂ pi F) : G = lift (Œª i, G ‚â´ pi.eval _ _) :=
by {cases G, refl}
-- inspired by golf due to Xu Junyan for the binary product case

variable (F)

/-- The dependent product of categories, as a cone -/
def cone : cone F :=
{ X := pi F ,
  œÄ := map_pi $ pi.eval _ }

namespace is_limit_cone

variable {F}

/-- Existence in the universal property of products (for cones) -/
def lift (c : limits.cone F) : c.X ‚ü∂ (cone F).X :=
lift (Œª i, c.œÄ.app i)

/-- The induced map from the universal property commutes with the diagram -/
lemma fac (c : limits.cone F) (i : discrete I) :
  lift c ‚â´ (cone F).œÄ.app i = c.œÄ.app i :=
by { rw self_eq_lift (lift c), apply functor.hext; { intros, refl } }
-- thanks to Xu Junyan's golf for the binary product case (by using hext ‚Üê ext)

/-- Uniqueness in the universal property of products -/
lemma uniq (c : limits.cone F) (m : c.X ‚ü∂ (cone F).X)
  (h : ‚àÄ (j : discrete I), m ‚â´ (cone F).œÄ.app j = c.œÄ.app j) :
  m = is_limit_cone.lift c :=
by { unfold lift, simp_rw ‚Üê h, apply functor.hext; { intros, refl } }
-- thanks to Xu Junyan's golf for the binary product case (by using hext ‚Üê ext)

end is_limit_cone

/-- The product of categories is a limit -/
def is_limit_cone : is_limit (cone F) :=
{ lift := is_limit_cone.lift,
  fac' := is_limit_cone.fac,
  uniq' := is_limit_cone.uniq }

/-- The product of categories is a limit cone -/
def limit_cone : limit_cone F :=
{ cone := cone F,
  is_limit := is_limit_cone F }

/-- The category of small categories has products -/
instance : has_products Cat.{u u} := Œª I,
{ has_limit := Œª F, ‚ü®‚ü® limit_cone F ‚ü©‚ü© }

end pi

namespace equalizer

variables {C D : Cat.{v u}} (F G : C ‚ü∂ D)

/-- The equalizer category of two functors (as an object in Cat) -/
def equalizer : Cat.{v u} :=
{ Œ± := { c : C // F.obj c = G.obj c } }

/-- The map embedding the equalizer of two functors into the source category -/
def fork_Œπ : equalizer F G ‚ü∂ C := equalizer.Œπ

lemma fork_condition : fork_Œπ F G ‚â´ F = fork_Œπ F G ‚â´ G :=
functor.hext (Œª ‚ü® _ , h ‚ü©, h ) (Œª _ _ f , f.2)

/-- The equalizer of two functors as a cone over the parallel pair diagram (called a fork) -/
def fork : fork F G := fork.of_Œπ (fork_Œπ F G) (fork_condition _ _)

variables {F G}

namespace is_limit_fork

/-- Existence part of the universal property of equalizers -/
def lift (c : category_theory.limits.fork F G) : c.X ‚ü∂ (fork F G).X :=
equalizer.lift c.Œπ
  (Œª x, by { have h := c.condition, dsimp only [(‚â´)] at h, rw h })
  (Œª _ _ f, by { convert functor.hcongr_hom c.condition f })

lemma fac (c : category_theory.limits.fork F G) :
  is_limit_fork.lift c ‚â´ (fork F G).Œπ = c.Œπ :=
functor.hext (Œª _, rfl) (Œª _ _ _, heq_of_eq rfl)
-- golf inspired by Xu Junyan's idea for binary products
-- (from 7 lines using ext ‚Üê hext)

/-- Uniqueness part of the universal property of equalizers -/
lemma uniq (c : category_theory.limits.fork F G) (m : c.X ‚ü∂ (fork F G).X)
  (h : ‚àÄ (j : walking_parallel_pair), m ‚â´ (fork F G).œÄ.app j = c.œÄ.app j) :
  m = is_limit_fork.lift c :=
by{ rw equalizer.self_eq_lift m, congr, exact h walking_parallel_pair.zero }
-- golf inspired by Xu Junyan's idea for binary products
-- (from 15 lines using self_eq_lift)

end is_limit_fork

open is_limit_fork

/-- The equalizer of two functors (as a cone/fork) is a limit -/
def is_limit_fork : is_limit (fork F G) :=
fork.is_limit.mk (fork F G) lift fac uniq

/-- The equalizer of two functors (as a cone/fork) is a limit -/
def limit_cone_parallel_pair : limit_cone (parallel_pair F G) :=
{ cone := fork F G,
  is_limit := is_limit_fork }

instance has_limit_parallel_pair : has_limit (parallel_pair F G) :=
‚ü®‚ü® limit_cone_parallel_pair ‚ü©‚ü©

instance has_equalizers : has_equalizers Cat.{v u} :=
has_equalizers_of_has_limit_parallel_pair _

end equalizer

/-- The category of small categories has all small limts -/
lemma has_limits : has_limits.{u} Cat.{u u} :=
limits_from_equalizers_and_products

/-- The category of small categories has pullback -/
instance : has_pullbacks Cat.{u u} :=
@has_limits.has_limits_of_shape _ _ has_limits _ _

end Cat
end category_theory

-- instance has_pullbacks : has_pullbacks Cat.{v u} :=
-- by apply_instance
